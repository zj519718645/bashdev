DROP PROCEDURE "TRPADM"."P_COPY_TRP_USER";
CREATE PROCEDURE "TRPADM"."P_COPY_TRP_USER"(IN USER_FROM VARCHAR(256),IN TARGET_USER VARCHAR(256),IN PASSWD VARCHAR(256))
AS
BEGIN


DECLARE ARR_OBJTY NVARCHAR(32) ARRAY;
DECLARE ARR_ROLES NVARCHAR(256) ARRAY;
DECLARE ROLE_NAME NVARCHAR(256);
DECLARE ARR_PRIVILEGES NVARCHAR(256) ARRAY;
DECLARE ARR_GRANT_OPTION VARCHAR(5) ARRAY;
DECLARE ARR_OBJECT NVARCHAR(256) ARRAY;
DECLARE ARR_SCHEMA NVARCHAR(256) ARRAY;
DECLARE ARR_IND INTEGER;
DECLARE DYNSQL NVARCHAR(1000);
DECLARE USERID BIGINT;
DECLARE USER_EXIST INT;

---HANDLE EXCEPTION
DECLARE MYCOND CONDITION FOR SQL_ERROR_CODE 10001;
DECLARE EXIT HANDLER FOR MYCOND
	SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM DUMMY;



--CHECK USER EXISTENCE
/*
FROM USER SHOULD EXIST
TARGET USER SHOULD NOT EXIST
*/
USER_EXIST := 0;
SELECT COUNT(*) INTO USER_EXIST FROM USERS WHERE USER_NAME = :USER_FROM;
IF :USER_EXIST = 0 
	THEN
	SIGNAL MYCOND SET MESSAGE_TEXT = 'creating user failed, the source user ' || :USER_FROM || ' not exist';
END IF;

USER_EXIST := 0;
SELECT COUNT(*) INTO USER_EXIST FROM "SAP_TM_TRP"."sap.tm.trp.db.systemmanagement.user::t_user" WHERE USERNAME = :TARGET_USER;
IF :USER_EXIST > 0
	THEN
	SIGNAL MYCOND SET MESSAGE_TEXT = 'creating user failed, the target user ' || :TARGET_USER || ' already exist';
END IF;

USER_EXIST := 0;
SELECT COUNT(*) INTO USER_EXIST FROM "SAP_TM_TRP"."sap.tm.trp.db.stock::t_start_time_for_user" WHERE USER = :TARGET_USER;
IF :USER_EXIST > 0
	THEN
	SIGNAL MYCOND SET MESSAGE_TEXT = 'creating user failed, the target user ' || :TARGET_USER || ' already exist';
END IF;

---FETCH ROLES AND APPLICATION PRIVILEGES PRIVILEGES
USERROLES = SELECT ROLE_NAME,IS_GRANTABLE FROM GRANTED_ROLES 
WHERE GRANTEE = :USER_FROM AND ROLE_NAME <> 'PUBLIC'
AND GRANTOR = '_SYS_REPO';
USERPRIVILEGES = SELECT PRIVILEGE FROM GRANTED_PRIVILEGES 
WHERE GRANTEE = :USER_FROM AND OBJECT_TYPE = 'APPLICATIONPRIVILEGE' ORDER BY PRIVILEGE;


--CREATE USER AND SET PASSWORD
DYNSQL := 'CREATE USER ' || :TARGET_USER || ' PASSWORD Initial_01';
EXECUTE IMMEDIATE :DYNSQL; 
CALL "TRPADM"."P_RESET_PASSWD"(:TARGET_USER,:PASSWD);

--ASSIGN ROLES
ARR_IND := 0;
ARR_ROLES := ARRAY_AGG(:USERROLES.ROLE_NAME);
ARR_GRANT_OPTION := ARRAY_AGG(:USERROLES.IS_GRANTABLE);
FOR ARR_IND IN 1 .. CARDINALITY(:ARR_ROLES) DO
	ROLE_NAME := :ARR_ROLES[:ARR_IND];
	--DYNSQL := 'CALL  _SYS_REPO.GRANT_ACTIVATED_ROLE('" || :ROLE_NAME || "','" || :TARGET_USER || "')";
	DYNSQL := 'CALL "_SYS_REPO"."GRANT_ACTIVATED_ROLE"(''' || :ROLE_NAME || ''',''' || :TARGET_USER || ''')';
	EXECUTE IMMEDIATE :DYNSQL; 
END FOR;



--ASSIGN PRIVILEGES
ARR_IND := 0;
ARR_PRIVILEGES := ARRAY_AGG(:USERPRIVILEGES.PRIVILEGE);
FOR ARR_IND IN 1 .. CARDINALITY(:ARR_PRIVILEGES) DO
	DYNSQL := 'CALL "_SYS_REPO"."GRANT_APPLICATION_PRIVILEGE"(''' || '"' || :ARR_PRIVILEGES[:ARR_IND] || '"' || ''',''' || :TARGET_USER || ''')';
	EXECUTE IMMEDIATE :DYNSQL; 
END FOR;




--CREATE ENTITY IN TRP TABLES
SELECT "SAP_TM_TRP"."sap.tm.trp.db.systemmanagement.user::s_user".NEXTVAL INTO USERID FROM DUMMY;
USERINFO = SELECT 
:USERID AS "ID",
:TARGET_USER AS "USERNAME",
:TARGET_USER AS "FIRST_NAME",
:TARGET_USER AS "MIDDLE_NAME",
:TARGET_USER AS "LAST_NAME",
"CREATE_DATE",
"START_DATE",
"END_DATE",
"LAST_MODIFIED_DATE",
"TIME_FORMAT_ID",
"DATE_FORMAT_ID",
"DECIMAL_NOTATION_ID",
"TEMPERATURE_UNIT_CODE",
"TIME_ZONE_CODE",
"WEIGHT_UNIT_CODE",
"DISTANCE_CODE",
"DAT_HORIZON",
"WEEK_HORIZON",
"VOLUMN_UNIT_CODE",
"THEME",
"CLIENT_CODE",
"USER_TYPE_ID",
"LANG_CODE",
"EQUIPMENT_GROUP_VISIBLE_FLAG",
"PLAN_MODEL_EXECUTE_FLAG",
"CODE"
FROM "SAP_TM_TRP"."sap.tm.trp.db.systemmanagement.user::t_user" WHERE USERNAME = :USER_FROM;
--UPDATE :USERINFO SET ID = :USERID;
INSERT INTO "SAP_TM_TRP"."sap.tm.trp.db.systemmanagement.user::t_user" SELECT * FROM :USERINFO;
USERTIMEOFFSET = SELECT :TARGET_USER AS USER, "DATE_OFFSET" FROM "SAP_TM_TRP"."sap.tm.trp.db.stock::t_start_time_for_user" WHERE USER = :USER_FROM;
INSERT INTO "SAP_TM_TRP"."sap.tm.trp.db.stock::t_start_time_for_user" SELECT * FROM :USERTIMEOFFSET;

SELECT 'SUCCESS' AS MESSAGE FROM DUMMY;

END;